name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - develop

jobs:
 configure_aws:
  name: Deploy AWS Infrastructure
  runs-on: ubuntu-latest

  steps:
    # Check out o código do repositório
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Configurar credenciais da AWS
    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Verificar se o serviço já existe
    - name: Check Existing Service
      id: check-service
      run: |
        SERVICE_NAME=${{ secrets.LAMBDA_FUNCTION_NAME }}
        EXISTING_SERVICE=$(aws lambda get-function --function-name $SERVICE_NAME 2>/dev/null || echo "null")
        if [ "$EXISTING_SERVICE" != "null" ]; then
          echo "service_exists=true" >> $GITHUB_ENV
        else
          echo "service_exists=false" >> $GITHUB_ENV
        fi

    # Configurar Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    # Inicializar Terraform
    - name: Terraform Init
      working-directory: ./infra
      run: terraform init

    # Planejar Terraform
    - name: Terraform Plan
      working-directory: ./infra
      if: env.service_exists == 'false'
      run: terraform plan -var="iam_role_name=${{ secrets.IAM_ROLE_NAME }}" -var="s3_bucket_name=${{ secrets.BUCKET_NAME }}"  -var="lambda_name=${{ secrets.LAMBDA_FUNCTION_NAME}}" -var="lambda_runtime=python3.8" -var="sns_topic_name=${{ secrets.SNS_TOPIC_NAME }}" -var="sqs_queue_notification_s3=${{ secrets.SQS_QUEUE_NOTIFICATION_S3 }}"

    # Aplicar Terraform
    - name: Terraform Apply
      working-directory: ./infra
      if: env.service_exists == 'false'
      run: terraform apply -auto-approve -var="iam_role_name=${{ secrets.IAM_ROLE_NAME }}" -var="s3_bucket_name=${{ secrets.BUCKET_NAME }}"  -var="lambda_name=${{ secrets.LAMBDA_FUNCTION_NAME}}" -var="lambda_runtime=python3.8" -var="sns_topic_name=${{ secrets.SNS_TOPIC_NAME }}" -var="sqs_queue_notification_s3=${{ secrets.SQS_QUEUE_NOTIFICATION_S3 }}"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    # Atualizar serviço se já existir
    - name: Update Existing Service
      if: env.service_exists == 'true'
      run: |
        echo "Atualizando serviço existente..."
        aws lambda update-function-configuration \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
          --runtime python3.8 \
          --handler app.handler \
          --timeout 15 \
          --memory-size 256

  upload_file:
    name: Upload File to S3
    runs-on: ubuntu-latest
    needs: configure_aws

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Dependencies
        run: pip install boto3 python-dotenv

      - name: Set Environment Variables
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
        run: |
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "BUCKET_NAME=${{ secrets.BUCKET_NAME }}" >> $GITHUB_ENV

      - name: Run Upload Script
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
        run: python ./app/upload_to_s3.py
